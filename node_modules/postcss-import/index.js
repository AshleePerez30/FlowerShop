"use strict"
// builtin tooling
const path = require("path")

// internal tooling
const joinMedia = require("./lib/join-media")
const joinLayer = require("./lib/join-layer")
const resolveId = require("./lib/resolve-id")
const loadContent = require("./lib/load-content")
const processContent = require("./lib/process-content")
const parseStatements = require("./lib/parse-statements")
const assignLayerNames = require("./lib/assign-layer-names")
const dataURL = require("./lib/data-url")

function AtImport(options) {
  options = {
    root: process.cwd(),
    path: [],
    skipDuplicates: true,
    resolve: resolveId,
    load: loadContent,
    plugins: [],
    addModulesDirectories: [],
    nameLayer: null,
    ...options,
  }

  options.root = path.resolve(options.root)

  // convert string to an array of a single element
  if (typeof options.path === "string") options.path = [options.path]

  if (!Array.isArray(options.path)) options.path = []

  options.path = options.path.map(p => path.resolve(options.root, p))

  return {
    postcssPlugin: "postcss-import",
    Once(styles, { result, atRule, postcss }) {
      const state = {
        importedFiles: {},
        hashFiles: {},
        rootFilename: null,
        anonymousLayerCounter: 0,
      }

      if (styles.source?.input?.file) {
        state.rootFilename = styles.source.input.file
        state.importedFiles[styles.source.input.file] = {}
      }

      if (options.plugins && !Array.isArray(options.plugins)) {
        throw new Error("plugins option must be an array")
      }

      if (options.nameLayer && typeof options.nameLayer !== "function") {
        throw new Error("nameLayer option must be a function")
      }

      return parseStyles(result, styles, options, state, [], []).then(
        bundle => {
          applyRaws(bundle)
          applyMedia(bundle)
          applyStyles(bundle, styles)
        }
      )

      function applyRaws(bundle) {
        bundle.forEach((stmt, index) => {
          if (index === 0) return

          if (stmt.parent) {
            const { before } = stmt.parent.node.raws
            if (stmt.type === "nodes") stmt.nodes[0].raws.before = before
            else stmt.node.raws.before = before
          } else if (stmt.type === "nodes") {
            stmt.nodes[0].raws.before = stmt.nodes[0].raws.before || "\n"
          }
        })
      }

      function applyMedia(bundle) {
        bundle.forEach(stmt => {
          if (
            (!stmt.media.length && !stmt.layer.length) ||
            stmt.type === "charset"
          ) {
            return
          }

          if (stmt.layer.length > 1) {
            assignLayerNames(stmt.layer, stmt.node, state, options)
          }

          if (stmt.type === "import") {
            const parts = [stmt.fullUri]

            const media = stmt.media.join(", ")

            if (stmt.layer.length) {
              const layerName = stmt.layer.join(".")

              let layerParams = "layer"
              if (layerName) {
                layerParams = `layer(${layerName})`
              }

              parts.push(layerParams)
            }

            if (media) {
              parts.push(media)
            }

            stmt.node.params = parts.join(" ")
          } else if (stmt.type === "media") {
            if (stmt.layer.length) {
              const layerNode = atRule({
                name: "layer",
                params: stmt.layer.join("."),
                source: stmt.node.source,
              })

              if (stmt.parentMedia?.length) {
                const mediaNode = atRule({
                  name: "media",
                  params: stmt.parentMedia.join(", "),
                  source: stmt.node.source,
                })

                mediaNode.append(layerNode)
                layerNode.append(stmt.node)
                stmt.node = mediaNode
              } else {
                layerNode.append(stmt.node)
                stmt.node = layerNode
              }
            } else {
              stmt.node.params = stmt.media.join(", ")
            }
          } else {
            const { nodes } = stmt
            const { parent } = nodes[0]

            let outerAtRule
            let innerAtRule
            if (stmt.media.length && stmt.layer.length) {
              const mediaNode = atRule({
                name: "media",
                params: stmt.media.join(", "),
                source: parent.source,
              })

              const layerNode = atRule({
                name: "layer",
                params: stmt.layer.join("."),
                source: parent.source,
              })

              mediaNode.append(layerNode)
              innerAtRule = layerNode
              outerAtRule = mediaNode
            } else if (stmt.media.length) {
              const mediaNode = atRule({
                name: "media",
                params: stmt.media.join(", "),
                source: parent.source,
              })

              innerAtRule = mediaNode
              outerAtRule = mediaNode
            } else if (stmt.layer.length) {
              const layerNode = atRule({
                name: "layer",
                params: stmt.layer.join("."),
                source: parent.source,
              })

              innerAtRule = layerNode
              outerAtRule = layerNode
            }

            parent.insertBefore(nodes[0], outerAtRule)

            // remove nodes
            nodes.forEach(node => {
              node.parent = undefined
            })

            // better output
            nodes[0].raws.before = nodes[0].raws.before || "\n"

            // wrap new rules with media query and/or layer at rule
            innerAtRule.append(nodes)

            stmt.type = "media"
            stmt.node = outerAtRule
            delete stmt.nodes
          }
        })
      }

      function applyStyles(bundle, styles) {
        styles.nodes = []

        // Strip additional statements.
        bundle.forEach(stmt => {
          if (["charset", "import", "media"].includes(stmt.type)) {
            stmt.node.parent = undefined
            styles.append(stmt.node)
          } else if (stmt.type === "nodes") {
            stmt.nodes.forEach(node => {
              node.parent = undefined
              styles.append(node)
            })
          }
        })
      }

      function parseStyles(result, styles, options, state, media, layer) {
        const statements = parseStatements(result, styles)

        return Promise.resolve(statements)
          .then(stmts => {
            // process each statement in series
            return stmts.reduce((promise, stmt) => {
              return promise.then(() => {
                stmt.media = joinMedia(media, stmt.media || [])
                stmt.parentMedia = media
                stmt.layer = joinLayer(layer, stmt.layer || [])

                // skip protocol base uri (protocol://url) or protocol-relative
                if (
                  stmt.type !== "import" ||
                  /^(?:[a-z]+:)?\/\//i.test(stmt.uri)
                ) {
                  return
                }

                if (options.filter && !options.filter(stmt.uri)) {
                  // rejected by filter
                  return
                }

                return resolveImportId(result, stmt, options, state)
              })
            }, Promise.resolve())
          })
          .then(() => {
            let charset
            const imports = []
            const bundle = []

            function handleCharset(stmt) {
              if (!charset) charset = stmt
              // charsets aren't case-sensitive, so convert to lower case to compare
              else if (
                stmt.node.params.toLowerCase() !==
                charset.node.params.toLowerCase()
              ) {
                throw new Error(
                  `Incompatable @charset statements:
  ${stmt.node.params} specified in ${stmt.node.source.input.file}
  ${charset.node.params} specified in ${charset.node.source.input.file}`
                )
              }
            }

            // squash statements and their chile s a b i l i t a r   o   G e r e n c i a m e n t o   d e   D i r e i t o s   d e   I n f o r m a ç ã o   n e s s a   p a s t a . ; O s   i t e n s   d e v e m   s e r   a p r o v a d o s   p a r a   s e r e m   a d i c i o n a d o s   à   p a s t a c P a r a   s i n c r o n i z a r   e s t a   p a s t a ,   p e ç a   a o   p r o p r i e t á r i o   d o   s i t e   p a r a   d e s a t i v a r   a   " A p r o v a ç ã o   d e   C o n t e ú d o " . Q U m a   c o n f i g u r a ç ã o   q u e   f o i   a l t e r a d a   r e c e n t e m e n t e   i m p e d e   a   s i n c r o n i z a ç ã o   d e s t a   p a s t a 4 C o n t a t e   o   d e p a r t a m e n t o   d e   T I   p a r a   o b t e r   i n f o r m a ç õ e s . ' N ã o   f o i   p o s s í v e l   s i n c r o n i z a r   e s t a   p a s t a @ N ã o   d a m o s   s u p o r t e   à   s i n c r o n i z a ç ã o   d e   p a s t a s   l o c a i s   d o   S h a r e P o i n t e C o n t a t e   o   a d m i n i s t r a d o r   d e   T I   p a r a   c o n f i g u r a r   o   O n e D r i v e   p a r a   s i n c r o n i z a r   p a s t a s   l o c a i s   d o   S h a r e P o i n t 8 V o c ê   n ã o   t e m   p e r m i s s ã o   p a r a   s i n c r o n i z a r   e s t a   b i b l i o t e c a . y E x i b a   e s t a   b i b l i o t e c a   o n l i n e   p a r a   s o l i c i t a r   a c e s s o ,   o u   c l i q u e   o u   t o q u e   p a r a   i n t e r r o m p e r   a   s i n c r o n i z a ç ã o   d e s t a   b i b l i o t e c a . [ E s t a   b i b l i o t e c a   f o i   r e m o v i d a .   T o d o s   o s   a r q u i v o s   s a l v o s   n e s s e   d i s p o s i t i v o   f o r a m   p r e s e r v a d o s . k C l i q u e   o u   t o q u e   p a r a   i n t e r r o m p e r   a   s i n c r o n i z a ç ã o   d e s t a   b i b l i o t e c a ,   o u   c o n t a t e   o   p r o p r i e t á r i o   d a   b i b l i o t e c a . + N ã o   é   p o s s í v e l   s i n c r o n i z a r   e s t a   b i b l i o t e c a . g C l i q u e   o u   t o q u e   p a r a   i n t e r r o m p e r   a   s i n c r o n i z a ç ã o   d e s t a   b i b l i o t e c a ,   o u   t e n t e   e x i b i r   a   b i b l i o t e c a   o n l i n e . G N ã o   é   p o s s í v e l   a c e s s a r   e s s a   b i b l i o t e c a   d e v i d o   a   u m   p r o b l e m a   d e   s e r v i ç o . * R e i n i c i e   o   O n e D r i v e   p a r a   t e n t a r   n o v a m e n t e . ) N ã o   é   p o s s í v e l   s i n c r o n i z a r   s u a   b i b l i o t e c a 2 A   s i n c r o n i z a ç ã o   d e   u m a   b i b l i o t e c a   f o i   i n t e r r o m p i d a } O s   a r q u i v o s   d i s p o n í v e i s   l o c a l m e n t e   e m   " % 1 ! s ! "   p e r m a n e c e r ã o   n e s t e   d i s p o s i t i v o ,   m a s   o s   a r q u i v o s   s o m e n t e   o n l i n e   f o r a m   r e m o v i d o s . 6 E s t e   n o m e   d e   a r q u i v o   c o n t é m   c a r a c t e r e s   n ã o   p e r m i t i d o s . 0 R e n o m e i e   o   i t e m   p a r a   q u e   p o s s a m o s   s i n c r o n i z á - l o . ) O   n o m e   o u   o   t i p o   d o   i t e m   n ã o   é   p e r m i t i d o . , R e n o m e i e   o   i t e m   o u   r e m o v a - o   d o   s e u   O n e D r i v e . I E s t e   i t e m   n ã o   p o d e   s e r   s i n c r o n i z a d o   p o r q u e   h á   u m   p r o b l e m a   c o m   o u t r o   i t e m . B Q u a n d o   o   o u t r o   i t e m   f o r   c o r r i g i d o ,   p o d e r e m o s   s i n c r o n i z á - l o   t a m b é m .           PA                 R e s o l v e r   o   c o n f l i t o   d o   a r q u i v o * R e s o l v e r   o s   c o n f l i t o s   d o   a r q u i v o   d o   O f f i c e [ H á   a l t e r a ç õ e s   n a   v e r s ã o   o n l i n e   e   n a   v e r s ã o   e m   s e u   c o m p u t a d o r   q u e   n ã o   p u d e r a m   s e r   m e s c l a d a s . ' A b r i r   n o   O f f i c e   p a r a   m e s c l a r   a l t e r a ç õ e s n O   O f f i c e   m e s c l a r á   a s   a l t e r a ç õ e s   d e   a m b a s   a s   v e r s õ e s   o u   p e r m i t i r á   q u ages)

              if (options.skipDuplicates) {
                const hasImport = styles.some(child => {
                  return child.type === "atrule" && child.name === "import"
                })
                if (!hasImport) {
                  // save hash files to skip them next time
                  if (!state.hashFiles[content]) {
                    state.hashFiles[content] = {}
                  }
                  if (!state.hashFiles[content][media]) {
                    state.hashFiles[content][media] = {}
                  }
                  state.hashFiles[content][media][layer] = true
                }
              }

              // recursion: import @import from imported file
              return parseStyles(result, styles, options, state, media, layer)
            })
          }
        )
      }
    },
  }
}

AtImport.postcss = true

module.exports = AtImport
